{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","remove","id","axios","delete","Filter","filter","setFilter","value","onChange","e","target","PersonForm","addPerson","newName","setNewName","newNumber","setNewNumber","onSubmit","type","Persons","persons","deletePerson","person","name","toLowerCase","includes","map","number","onClick","Notification","message","className","App","useState","setPersons","setMessage","messageType","setMessageType","useEffect","a","get","data","fetchPersons","preventDefault","newPerson","found","find","window","confirm","updatePerson","newObject","post","concat","setTimeout","response","error","put","newPersons","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9741b354.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst baseUrl = \"/api/persons\";\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl);\r\n};\r\n\r\nconst create = (newObject) => {\r\n  return axios.post(baseUrl, newObject);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject);\r\n};\r\n\r\nconst remove = (id) => {\r\n  return axios.delete(`${baseUrl}/${id}`);\r\n};\r\n\r\nexport { getAll, create, update, remove };\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nimport { getAll, create, update, remove } from \"./services/persons\";\n\nconst Filter = ({ filter, setFilter }) => {\n  return (\n    <div>\n      filter shown with\n      <input value={filter} onChange={(e) => setFilter(e.target.value)} />\n    </div>\n  );\n};\n\nconst PersonForm = ({\n  addPerson,\n  newName,\n  setNewName,\n  newNumber,\n  setNewNumber,\n}) => {\n  return (\n    <form onSubmit={(e) => addPerson(e)}>\n      <div>\n        name:\n        <input value={newName} onChange={(e) => setNewName(e.target.value)} />\n      </div>\n      <div>\n        number:\n        <input\n          value={newNumber}\n          onChange={(e) => setNewNumber(e.target.value)}\n        />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nconst Persons = ({ persons, filter, deletePerson }) => {\n  return persons\n    .filter((person) =>\n      person.name.toLowerCase().includes(filter.toLowerCase())\n    )\n    .map((person) => (\n      <div key={person.id}>\n        <p>\n          {person.name} {person.number}\n        </p>\n        <button onClick={() => deletePerson(person)}>delete</button>\n      </div>\n    ));\n};\n\nconst Notification = ({ message, type }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className={`notification ${type}`}>{message}</div>;\n};\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [filter, setFilter] = useState(\"\");\n  const [message, setMessage] = useState(null);\n  const [messageType, setMessageType] = useState(\"\");\n\n  useEffect(() => {\n    const fetchPersons = async () => {\n      const { data } = await getAll();\n      setPersons(data);\n    };\n    fetchPersons();\n  }, []);\n\n  const addPerson = async (e) => {\n    e.preventDefault();\n    const newPerson = {\n      name: newName,\n      number: newNumber,\n    };\n    const found = persons.find((person) => person.name === newName);\n    if (found) {\n      if (\n        window.confirm(\n          `${found.name} is already added to phonebook, replace the old number with a new one?`\n        )\n      ) {\n        updatePerson(found, newPerson);\n      }\n    } else {\n      try {\n        const { data } = await create(newPerson);\n        setPersons(persons.concat(data));\n        setNewName(\"\");\n        setNewNumber(\"\");\n        setMessage(`Added ${data.name}`);\n        setMessageType(\"success\");\n        setTimeout(() => {\n          setMessage(null);\n          setMessageType(\"\");\n        }, 5000);\n      } catch (err) {\n        setMessage(err.response.data.error);\n        setMessageType(\"error\");\n        setTimeout(() => {\n          setMessage(null);\n          setMessageType(\"\");\n        }, 5000);\n      }\n    }\n  };\n\n  const updatePerson = async (found, newPerson) => {\n    try {\n      const { data } = await update(found.id, newPerson);\n      setPersons(\n        persons.map((person) => (person.id !== found.id ? person : data))\n      );\n      setNewName(\"\");\n      setNewNumber(\"\");\n      setMessage(`Updated ${data.name}`);\n      setMessageType(\"success\");\n      setTimeout(() => {\n        setMessage(null);\n        setMessageType(\"\");\n      }, 5000);\n    } catch (err) {\n      setMessage(\n        `Information of ${found.name} has already been removed from server`\n      );\n      setMessageType(\"error\");\n      setTimeout(() => {\n        setMessage(null);\n        setMessageType(\"\");\n      }, 5000);\n      setPersons(persons.filter((person) => person.id !== found.id));\n    }\n  };\n\n  const deletePerson = async ({ id, name }) => {\n    if (window.confirm(`Delete ${name} ?`)) {\n      try {\n        await remove(id);\n        const newPersons = persons.filter((person) => person.id !== id);\n        setPersons(newPersons);\n        setMessage(`Deleted ${name}`);\n        setMessageType(\"success\");\n        setTimeout(() => {\n          setMessage(null);\n          setMessageType(\"\");\n        }, 5000);\n      } catch (err) {}\n    }\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} type={messageType} />\n      <Filter filter={filter} setFilter={setFilter} />\n      <h3>Add a new</h3>\n      <PersonForm\n        addPerson={addPerson}\n        newName={newName}\n        setNewName={setNewName}\n        newNumber={newNumber}\n        setNewNumber={setNewNumber}\n      />\n      <h3>Numbers</h3>\n      <Persons persons={persons} filter={filter} deletePerson={deletePerson} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}